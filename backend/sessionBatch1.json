{
    "sessionNotes": [
        {
            "iteration": 1,
            "fixed_notes": "Microbiologists are scientists who study microbes\u2014organisms so tiny they can only be seen with microscopes. These microbes are ubiquitous, living on doorknobs, money, and our hands. If someone sneezes into their hand, touches a doorknob, and then you touch the same doorknob, their microbes are now on your hands. If you touch your mouth, nose, or eyes, these microbes can enter your body and potentially make you sick.\n\nHowever, not all microbes cause disease; most are beneficial. For example, some microbes in our gut produce vitamin K, and others are used to ferment beer and wine.\n\nMicrobiologists work in various sectors, including food, veterinary, and medical industries. They also play key roles in the pharmaceutical sector, researching and developing new antibiotic sources to treat bacterial infections. Environmental microbiologists explore ways to use selected or genetically engineered microbes to remove pollutants from soil, groundwater, and contaminated sites\u2014a technology known as bioremediation. Additionally, microbiologists contribute to the field of bioinformatics, offering specialized knowledge for designing, developing, and optimizing computer models, such as those simulating bacterial epidemics.\n\nProkaryotic cells, with a diameter of 0.1 to 5.0 \u03bcm, are significantly smaller than eukaryotic cells, which range from 10 to 100 \u03bcm in diameter. This small size allows ions and organic molecules to quickly diffuse throughout the prokaryotic cell, and wastes to diffuse out. Eukaryotic cells, on the other hand, have developed structural adaptations to enhance intracellular transport."
        },
        {
            "iteration": 2,
            "fixed_notes": "At 0.1 to 5.0 \u03bcm in diameter, prokaryotic cells are significantly smaller than eukaryotic cells, which range from 10 to 100 \u03bcm in diameter, with animal cells being typically on the larger end of the spectrum. This is because prokaryotes (or organisms so tiny that they can only be seen with microscopes) are Ubiquitous. They live on doorknobs, money, your hands, and many other surfaces. If someone sneezes into his hand and touches a doorknob, and afterward you touch that same doorknob, then the microbes from the sneezer's mucus are now on your hands. If you touch your hands to your mouth, nose, or eyes, those microbes can enter your body and could make you sick.\n\n\nHowever, not all microbes (also called microorganisms) cause disease; most are actually beneficial. You have microbes in your gut that make vitamin K. Others are used to ferment beer and wine. Microbiologists are scientists who study microbes. Microbiologists can pursue a number of careers. Not only do they work in the food industry, they are also employed in the veterinary and medical fields. They can work in the pharmaceutical sector, serving key roles in research and development by identifying new antibiotic sources that can treat bacterial infections.\n\n\nEnvironmental microbiologists may look for new ways to use specially selected or genetically engineered microbes to remove pollutants from soil or groundwater, as well as hazardous elements from contaminated sites. We call using these microbes bioremediation technologies. Microbiologists can also work in the bioinformatics field, providing specialized knowledge and insight for designing, developing, and optimizing computer models of specific biological systems, such as bacterial epidemics.\n\n\nCell Size\n\n\nAt 0.1 to 5.0 \u03bcm in diameter, prokaryotic cells are significantly smaller than eukaryotic cells, which range from 10 to 100 \u03bcm in diameter, with animal cells being typically on the larger end of the spectrum. This is because prokaryotes (or organisms so tiny that they can only be seen with microscopes) are Ubiquitous. They live on doorknobs, money, your hands, and many other surfaces. If someone sneezes into his hand and touches a doorknob, and afterward you touch that same doorknob, then the microbes from the sneezer's mucus are now on your hands. If you touch your hands to your mouth, nose, or eyes, those microbes can enter your body and could make you sick.\n\n\nHowever, not all microbes (also called microorganisms) cause disease; most are actually beneficial. You have microbes in your gut that make vitamin K. Others are used to ferment beer and wine. Microbiologists are scientists who study microbes. Microbiology is a branch of life sciences that involves the study of microscopic organisms. Microbiologists can pursue a number of careers. Not only do they work in the food industry, they are also employed in the veterinary and medical fields. They can work in the pharmaceutical sector, serving key roles in research and development by identifying new antibiotic sources that can treat bacterial infections.\n\n\nEnvironmental microbiologists may look for new ways to use specially selected or genetically engineered microbes to remove pollutants from soil or groundwater, as well as hazardous elements from contaminated sites. We call using these microbes bioremediation technologies. Microbiologists can also work in the bioinformatics field, providing specialized knowledge and insight for designing, developing, and optimizing computer models of specific biological systems, such as bacterial epidemics."
        },
        {
            "iteration": 1,
            "fixed_notes": "23 def generateTopics(self, numberOfTopics):\n24 print(self.topicsGeneration.coherentTopics(self.generateNotes(), numberOfTopics))\n25 return self.topicsGeneration.coherentTopics(self.generateNotes(), numberOfTopics)\n26\n27 def filterNotes(self, notes, topics):\n28 print(self.filteredNotes.coherentFilter(notes, topics))\n29\n30 def questionGeneration(self, notes):\n31 print(self.questionsGeneration.coherentQuestions(notes))\n32\n33 if __name__ == \"__main__\":\n34 run = Main()\n35 run.generateTopics(5)\n\n--- OUTPUT IN DEBUG CONSOLE, TERMINAL PORTS ---\n\nno 2] No such file or directory\n\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd backend\n{PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> python -m venv venv\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> venv\\Scripts\\activate\n\nThen Call 'python main.py' or 'py main.py'"
        },
        {
            "iteration": 2,
            "fixed_notes": "2\n3\n\nd\ne\nt\n\ng\ne\nn\ne\nr\na\nt\ne\nT\no\np\ni\nc\ns\n(\ns\ne\nl\nf\n,\nn\nu\nm\nb\ne\nr\no\nf\nT\no\np\ni\nc\ns\n)\n\n2\n4\n\np\nr\ni\nnt\n\ns\ne\nl\nf\n.\nt\no\np\ni\nc\ns\nG\ne\nn\ne\nr\na\nt\ni\no\nn\n.\nc\no\nh\ne\nr\ne\nn\nt\nT\no\np\ni\nc\ns\n(\ns\ne\nl\nf\n.\ng\ne\nn\ne\nr\na\nt\ne\nN\no\nt\ne\ns\n(\n)\n,\nn\nu\nm\nb\ne\nr\nO\nf\nT\no\np\ni\nc\ns\n)\n)\n\n2\n7\n\nd\no\nt\n\nF\ni\nl\nt\ne\nr\nh\no\nt\ne\ns\n(\ns\ne\nl\nf\n,\nn\no\nt\ne\ns\n,\nt\no\np\ni\nc\ns\n)\n\n2\n8\n\np\nr\ni\nn\nt\n(\ns\ne\nl\nf\n.\nf\ni\nl\nt\ne\nr\ne\nd\nl\ni\no\nt\ne\ns\n.\nc\no\nh\ne\nr\ne\nn\nt\nF\ni\nl\nt\ne\nr\n(\nn\no\nt\ne\ns\n,\nt\no\np\ni\nc\ns\n)\n)\n\n2\n9\n\n3\n\nd\ne\nt\n\nq\nu\ne\ns\nt\ni\no\nn\ns\ne\nn\ne\nr\na\nt\ni\no\nn\n(\ns\ne\nl\nf\n,\nn\no\nt\ne\ns\n)\n\n3\n\np\nr\ni\nn\nt\n(\ns\ne\nl\nf\n.\nq\nu\ne\ns\nt\ni\no\nn\ns\nG\ne\nn\ne\nr\na\nt\ni\no\nn\n.\nc\no\nh\ne\nr\ne\nn\nt\nQ\nu\ne\ns\nt\ni\no\nn\ns\n(\nn\no\nt\ne\ns\n)\n)\n\n3\n8\n\nA\nf\n\n\"\nm\na\ni\nn\n\"\n\n=\n=\n\n_\nn\na\nm\ne\n_\n:\n\n3\n5\n\nr\nu\nn\n\n=\n\nM\na\ni\nn\n(\n)\n\n3\n6\n\nr\nu\nn\n.\ng\ne\nn\ne\nr\na\nt\ne\nT\ne\np\ni\nc\ns\n(\n5\n)\n\nr\no\nm\ni\ne\nn\ns\n\n@\n\nO\nU\nT\nP\nU\nT\n\nB\nE\nB\nU\nG\nC\nO\nN\nS\nO\nL\nE\n\nT\nE\nR\nM\nI\nN\nA\nL\n\nP\nO\nR\nT\nS\n\nn\no\n\n2\n]\n\nN\no\n\ns\nu\nc\nh\n\nf\ni\nl\ne\n\no\nr\n\nd\ni\nr\ne\nc\nt\no\nr\ny\n\n\u00a9\n\nP\nS\n\nC\n:\n\\\nU\ns\ne\nr\ns\n\\\np\nr\na\nn\na\n\\\nD\no\nc\nu\nm\ne\nn\nt\ns\n\\\nG\ni\nt\ni\nu\nb\n\\\ns\ne\ns\ns\ni\no\nn\ns\n.\na\ni\n>\n\nc\nd\n\nb\na\nc\nk\ne\nn\nd\n\n{\nP\nS\n\nC\n:\n\\\nU\ns\ne\nr\ns\n\\\np\nr\na\nn\na\n\\\nD\no\nc\nu\nm\ne\nn\nt\ns\n\\\nG\ni\nt\nt\nu\nb\n\\\ns\ne\ns\ns\ni\no\nn\ns\n.\ne\ni\n\\\nb\na\nc\nk\ne\nn\nd\n>\n\np\ny\nt\nh\no\nn\n\n-\nm\n\nv\ne\nn\nw\n\nv\ne\nn\nv\n\n\u00a9\n\nP\nS\n\nC\n:\n\\\nU\ns\ne\nr\ns\n\\\np\nr\na\nn\na\n\\\nD\no\nc\nu\nm\ne\nn\nt\ns\n\\\nG\ni\nt\nh\nu\nb\n\\\ns\ne\ns\ns\ni\no\nn\ns\n.\ne\ni\n\\\nb\na\nc\nk\ne\nn\nd\n>\n\nv\ne\nr\nv\n\\\nS\nc\nr\ni\np\nt\ns\n\\\na\nc\nt\ni\nv\ne\nt\ne"
        },
        {
            "iteration": 3,
            "fixed_notes": "2. Topics (self, number of topics)\n\n2.4. Print self.topics Generation.coherent.topics (self.generatenotes(), numberoftopics)\n\n2.7. Dot Filter (self, notes, topics)\n\n2.8. Print (self.filteredlots.coherent.filter (self, filteredslots.coherent.filter (self, notes, topics)))\n\n2.9.\n\n3. Det Question Generation (self, notes)\n\n3. Print (self.questiongeneration.coherent.questiongeneration (self, notes))\n\n3.8. If \"main\" = = _name_:\n\n35. Run: Main()\n\n36. Run: GenerateTopics(5)\n\nRomans @OUTPUT BEBUGCONSOLETERMINAL PORTS\n\nNo such file or directory\n\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd ..\n\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub>\n\nThan Call 26. Sparen Aire UIRE CRIF i) Pat\nPatho,"
        },
        {
            "iteration": 4,
            "fixed_notes": "2.3 Definitions (self, number, noun)\n2.4 Print self, number, noun)\n2.7 Dots (self, number, noun)\n2.8 Print (self, number, noun)\n2.9\n3 Definitions (self, number, noun)\n3.5 Run (self, number, noun)\n3.6 Run. Generate Topics (5)\nRoman. OUTPUT BUGCLE Terminal\nPORTS\nPython\nC: \\Users\\prana\\Documents\\GitHub\\sessions\\back\n\u00a9 PSC: \\Users\\prana\\Documents\\GitHub\\sessions\\back\n\u00a9 PSC: \\Users\\prana\\Documents\\GitHub\\sessions\\back\n\u00a9 PSC: \\Users\\prana\\Documents\\GitHub\\sessions\\back\nThan Cal 26. Spare\nAir, UIRE CRIF i) Patho,\nThen ensure the above is extremely readable. No gibberish; however, if strings of characters are unredeemable, scratch them off. Get rid of the duplicates in this text and fix some of the grammar here. STAY ON TOPIC."
        },
        {
            "iteration": 5,
            "fixed_notes": "2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nq\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nq\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nw\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,"
        },
        {
            "iteration": 1,
            "fixed_notes": "2 return (self.topicsGeneration.coherentTopics(self.generateNotes(), numberofTopics))\n27 def iterateTopics(self, notes, topics):\n23 print(self.FEIESRWAHGREE.coherentFilter(notes, topics))\n30 def questionGeneration(self, notes):\n31 print (self.questionsGeneration.coherentQuestions(notes))\n35 \n36 if __name__ == '__main__':\n37     generateTopics(5)\n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd backend\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> python -m venv env\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> env\\Scripts\\activate\n\nThen Call\n\npython main.py\n\nEnsure the above is extremely readable. \n\n--- \n\n# Code Snippet: \n\n```python\n2 return (self.topicsGeneration.coherentTopics(self.generateNotes(), numberofTopics))\n27 def iterateTopics(self, notes, topics):\n23 print(self.coherentFilter(notes, topics))\n30 def questionGeneration(self, notes):\n31 print (self.questionsGeneration.coherentQuestions(notes))\n35 \n36 if __name__ == '__main__':\n37 generateTopics(5)\n```\n\n--- \n\nTo run the code: \n\n```\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd backend\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> python -m venv env \n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai\\backend> env\\Scripts\\activate\n\nThen, call python main.py\n```"
        },
        {
            "iteration": 2,
            "fixed_notes": "2\n\nreturn\n(self.topicsGeneration.coherentTopics(self.generateNotes(), numberofTopics))\n\n\n27\ndef\n#iterator(self, notes, topics):\n\n\n23\nprint(self.\u00a9.FEIESTWAHGREEE.coherentFilter(notes, topics))\n\n\n30\ndef questionseneration(self, notes):\na\nprint\n(self.questionsGeneration.coherentQuestions(notes))\nry\n\n\n35\nMain\n\nx6\n-generateTopics(5)\n\n\n\n\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai> cd\n\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> python\n-m env venv\n\n\n\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> venv\\Scripts\\activate\n\n\nThan Call 26 Sparen A UIRE CRIF i) Patho,\n\n\n2\nreturn\n(self.topicsGeneration.coherentTopics(self.generateNotes(), numberofTopics))\n\n\n27\ndef\n#iterator(self, notes, topics):\n\n\n23\nprint(self.\u00a9.FEIESTWAHGREEE.coherentFilter(notes, topics))\n\n\nce questionsen (VATisbIe) questionseneration: Generate questions =\n\n\na\nprint\n(self.questionsGeneration.coherentQuestions(notes))\nry\n\n\n35\nMain\n\nx6\n-generateTopics(5)\n\n\n\n\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai> cd\n\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> python\n-m env venv\n\n\n\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> venv\\Scripts\\activate\n\n\nThan Call 26 Sparen A UIRE CRIF i) Patho,\n\n\n2\nreturn\n(self.topicsGeneration.coherentTopics(self.generateNotes(), numberofTopics))\n\n\n27\ndef\n#iterator(self, notes, topics):\n\n\n23\nprint(self.\u00a9.FEIESTWAHGREEE.coherentFilter(notes, topics))\n\n\n30\ndef questionseneration(self, notes):\na\nprint\n(self.questionsGeneration.coherentQuestions(notes))\nry\n\n\n35\nMain\n\nx6\n-generateTopics(5)\n\n\n\n\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai> cd\n(\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> python\n-m env venv\n\n\n\u00a9 PSC:\\Users\\prana\\Documents\\GitLab\\sessions.ai\\backend> venv\\Scripts\\activate\n\n\nThan Call 26 Sparen A UIRE CRIF i) Patho,"
        },
        {
            "iteration": 3,
            "fixed_notes": "Than Call #26 Sparen Aire Uire Crif i) Patho, \n\nReturn (self. topics Generation. coherent ent Topics (self. general ate Notes (, number of Topics) ) ) \n\n#27 defitter totes (self, notes, topics): \n\n#23 print (self. cents. FEIES RAWAGE. coherent ent Filter (notes, topics) ) \n\n#30 det quest ions eneration (self, notes): \n\na print (self. cents. questions Generation. coherent ent Questions (notes) ) \n\nry \n\n#35 Main \n\nx6 -generate Topics (5) \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> python \n\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> venv\\Scripts\\python.exe venv\\lib\\site-packages\\ipykernel\\kernelapp.py -m ipykernel_launcher -f \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> venv\\Scripts\\python.exe venv\\lib\\site-packages\\notebook\\notebookapp.py \n\nThan Call #26 Sparen Aire Uire Crif i) Patho, \n\nReturn (self. topics Generation. coherent ent Topics (self. general ate Notes (, number of Topics) ) ) \n\n#27 defitter totes (self, notes, topics): \n\n#23 print (self. cents. FEIES TWAHGE. coherent ent Filter (notes, topics) ) \n\ncents quest ions eneration (self, notes): \n\na print (self. cents. questions Generation. coherent ent Questions (notes) ) \n\nry \n\n#35 Main \n\nx6 -generate Topics (5) \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> cd \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> python \n\n\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> venv\\Scripts\\python.exe venv\\lib\\site-packages\\ipykernel\\kernelapp.py -m ipykernel_launcher -f \n\n(\u00a9 PS C:\\Users\\prana\\Documents\\GitHub\\sessions.ai> venv\\Scripts\\python.exe venv\\lib\\site-packages\\notebook\\notebookapp.py"
        },
        {
            "iteration": 4,
            "fixed_notes": "2 Return (self.topicsGeneration.generalization.notes, number 27)\n\ndef __init__(self, notes: List [str]):\n    super().__init__(self, notes)\n\ndef return(self) -> str:\n    return self.notes[2]\n\ndef print(self) -> None:\n    print(self.return())\n\ndef print_all(self) -> None:\n    for note in self.notes:\n        print(note)\n\ndef print_question(self, question: str) -> None:\n    print(f\"Question: {question}\\nAnswer: {self.return()}\")\n\ndef print_questions(self, questions: List [str]) -> None:\n    for question in questions:\n        self.print_question(question)\n\ndef main(self) -> None:\n    self.print()\n    self.print_all()\n    self.print_questions([\"What is the return of the function?\", \"What does the function do?\", \"How can I use the function in my code?\"])\n\nif __name__ == \"__main__\":\n    Return = Return(\n        [\n            \"from topics.generation.generalization import Notes, Topic\",\n            \"from typing import List\",\n            \"\",\n            \"class Return(Notes):\",\n            \"    \"\"\"\",\n            \"    A class that represents a return value from a function.\",\n            \"    Attributes\",\n            \"    ----------\",\n            \"    notes : List[str]\",\n            \"        The list of notes that the return value contains.\",\n            \"    Methods\",\n            \"    -------\",\n            \"    return(self) -> str\",\n            \"        Returns the first note in the list of notes.\",\n            \"    print(self) -> None\",\n            \"        Prints the first note in the list of notes.\",\n            \"    print_all(self) -> None\",\n            \"        Prints all the notes in the list of notes.\",\n            \"    print_question(self, question: str) -> None\",\n            \"        Prints the question and the corresponding note from the list of notes.\",\n            \"    print_questions(self, questions: List[str]) -> None\",\n            \"        Prints a list of questions and their corresponding notes from the list of notes.\",\n            \"    \"\"\",\n            \"    def __init__(self, notes: List[str]):\",\n            \"        super().__init__(self, notes)\",\n            \"    def return(self) -> str:\",\n            \"        return self.notes[2]\",\n            \"    def print(self) -> None:\",\n            \"        print(self.return())\",\n            \"    def print_all(self) -> None:\",\n            \"        for note in self.notes:\",\n            \"            print(note)\",\n            \"    def print_question(self, question: str) -> None:\",\n            \"        print(f\\\"Question: {question}\\\\nAnswer: {self.return()}\\\")\",\n            \"    def print_questions(self, questions: List[str]) -> None:\",\n            \"        for question in questions:\",\n            \"            self.print_question(question)\",\n            \"    def main(self) -> None:\",\n            \"        self.print()\",\n            \"        self.print_all()\",\n            \"        self.print_questions([\\\"What is the return of the function?\\\", \\\"What does the function do?\\\", \\\"How can I use the function in my code?\\\"])\",\n            \"    if __name__ == \\\"__main__\\\":\",\n            \"        Return = Return([\",\n            \"            \\\"from topics.generation.generalization import Notes, Topic\\\",\",\n            \"            \\\"from typing import List\\\",\",\n            \"\",\n            \"            \\\"class Return(Notes):\\\",\",\n            \"            \\\"    '''\\\",\",\n            \"            \\\"    A class that represents a return value from a function.\\\",\n            \"            \\\"    Attributes\\\",\n            \"            \\\"    ----------\\\",\n            \"            \\\"    notes : List[str]\\\",\n            \"            \\\"        The list of notes that the return value contains.\\\",\n            \"            \\\"    Methods\\\",\n            \"            \\\"    -------\\\",\n            \"            \\\"    return(self) -> str\\\",\n            \"            \\\"        Returns the first note in the list of notes.\\\",\n            \"            \\\"    print(self) -> None\\\",\n            \"            \\\"        Prints the first note in the list of notes.\\\",\n            \"            \\\"    print_all(self) -> None\\\",\n            \"            \\\"        Prints all the notes in the list of notes.\\\",\n            \"            \\\"    print_question(self, question: str) -> None\\\",\n            \"            \\\"        Prints the question and the corresponding note from the list of notes.\\\",\n            \"            \\\"    print_questions(self, questions: List[str]) -> None\\\",\n            \"            \\\"        Prints a list of questions and their corresponding notes from the list of notes.\\\",\n            \"            \\\"    \\\",\",\n            \"            \\\"    def __init__(self, notes: List[str]):\\\",\n            \"            \\\"        super().__init__(self, notes)\\\",\n            \"            \\\"    def return(self) -> str:\\\",\n            \"            \\\"        return self.notes[2]\\\",\n            \"            \\\"    def print(self) -> None:\\\",\n            \"            \\\"        print(self.return())\\\",\n            \"            \\\"    def print_all(self) -> None:\\\",\n            \"            \\\"        for note in self.notes:\\\",\n            \"            \\\"            print(note)\\\",\n            \"            \\\"    def print_question(self, question: str) -> None:\\\",\n            \"            \\\"        print(f\\\\\\\"Question: {question}\\\\\\\\nAnswer: {self.return()}\\\\\\\")\\\",\n            \"            \\\"    def print_questions(self, questions: List[str]) -> None:\\\",\n            \"            \\\"        for question in questions:\\\",\n            \"            \\\"            self.print_question(question)\\\",\n            \"            \\\"    def main(self) -> None:\\\",\n            \"            \\\"        self.print()\\\",\n            \"            \\\"        self.print_all()\\\",\n            \"            \\\"        self.print_questions([\\\\\\\"What is the return of the function?\\\\\\\", \\\\\\\"What does the function do?\\\\\\\", \\\\\\\"How can I\",\n            \"            \\\"            \\\"use the function in my code?\\\\\\\"])\\\",\n            \"            \\\"    if __name__ == \\\"__main__\\\":\\\",\n            \"            \\\"        Return = Return([\",\n        ]\n    )\n    Return.main()"
        },
        {
            "iteration": 1,
            "fixed_notes": "Study sessions are an important part of learning and retaining information. Here are some key notes to ensure an effective study session: \n\n- Create a study plan: Organize the topics you need to cover and allocate time accordingly. \n- Find a suitable environment: Choose a quiet and comfortable place where you can focus without distractions. \n- Utilize resources: Gather all the necessary materials, such as textbooks, notes, and online resources, to ensure a productive session. \n- Take breaks: Short breaks can help improve concentration and prevent burnout. Ensure you take a few minutes to relax and recharge between topics. \n- Practice active learning: Engage with the material by asking questions, creating mind maps, or teaching concepts to a friend. Active participation enhances understanding and memory retention. \n- Review and revise: Summarize key points at the end of each topic and review them regularly to reinforce your learning. \n\nRemember to stay focused, eliminate distractions, and maintain a consistent study schedule. Good luck with your studies!"
        },
        {
            "iteration": 1,
            "fixed_notes": "Create a new virtual environment:\n\n```\npython -m venv <env_name>\n```\n\nActivate the virtual environment:\n\n```\n<env_name>\\Scripts\\activate\n```\n\nInstall the Cohere Python SDK:\n\n```\npip install cohere\n```\n\nImport the necessary modules and set up the Cohere client:\n\n```python\nimport cohere\nfrom recorder import recorded_study\n\nco = cohere.Client(api_key=cohere_api)\n```\n\nUse the Cohere Chat model to generate session notes based on the recorded study data:\n\n```python\nfor i in range(num_sessions):\n    recorded_study = recorder.run()\n    response = co.chat(\n        model=\"command-r-plus\",\n        messages=recorded_study,\n    )\n    session_notes.append({\n        \"iteration\": i + 1,\n        \"fixed_notes\": response.text,\n    })\n```\n\nEnsure the session notes are readable and make sense in the context of studying a subject."
        }
    ]
}